/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tsatry2.ui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import tsatry2.decrypt.Decrypt;
import tsatry2.encrypt.Ide;

/**
 *
 * @author Henry
 */
public class decalcUI extends javax.swing.JFrame {

    /**
     * Creates new form calcUI
     */
    public decalcUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        isOut = new javax.swing.ButtonGroup();
        backButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        clearFields = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        entryTextField = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        textA = new javax.swing.JTextField();
        textB = new javax.swing.JTextField();
        decryptButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        statusTextDe = new javax.swing.JTextField();
        fileOut = new javax.swing.JRadioButton();
        fieldOut = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Rose Hill Quark Robotics Encryption");

        saveButton.setText("Save To File");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        clearFields.setText("Clear all fields");
        clearFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsActionPerformed(evt);
            }
        });

        entryTextField.setColumns(20);
        entryTextField.setRows(5);
        jScrollPane2.setViewportView(entryTextField);

        outputTextArea.setEditable(false);
        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        jScrollPane4.setViewportView(outputTextArea);

        decryptButton.setText("Decrypt");
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        importButton.setText("Import From File");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        statusTextDe.setEditable(false);

        isOut.add(fileOut);
        fileOut.setText("Output to file");

        isOut.add(fieldOut);
        fieldOut.setSelected(true);
        fieldOut.setText("Output to text field");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusTextDe)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 391, Short.MAX_VALUE)
                        .addComponent(clearFields)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textA, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textB, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fieldOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fileOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(importButton)
                        .addGap(89, 89, 89)
                        .addComponent(decryptButton))
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(jLabel2)
                    .addComponent(saveButton)
                    .addComponent(clearFields))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(textB))
                            .addComponent(textA)
                            .addComponent(decryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(importButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusTextDe, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fileOut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldOut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        String[] args = {""};//Empty string for arguements
        startUI.main(args);//Open starting UI
        dispose();// Close this window
    }                                          

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try {
            statusTextDe.setText("Writing to file. Please Wait");//Set status
            statusTextDe.update(statusTextDe.getGraphics());//Updtae status
            PrintWriter out = new PrintWriter("dencrypted.txt");//Open a file writer
            out.print(outputTextArea.getText());//Put output into file
            out.close();
            statusTextDe.setText("Done writing to file.");//Set status
            statusTextDe.update(statusTextDe.getGraphics());//Updtae status
        } catch (FileNotFoundException ex) {
            Logger.getLogger(decalcUI.class.getName()).log(Level.SEVERE, null, ex);//Catch any errors
        }
    }                                          

    private void clearFieldsActionPerformed(java.awt.event.ActionEvent evt) {                                            
        outputTextArea.setText("");//Set text fields to empty string
        textA.setText("");
        textB.setText("");
        entryTextField.setText("");
        statusTextDe.setText("");
    }                                           

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        final JFileChooser fc = new JFileChooser(); //create file chooser
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);//set file rules
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");//more file rules
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(decalcUI.this);//open file chooser gui
        String input = null;//null strings
        String line = null;
        entryTextField.setText("");//wipe the entry text field
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File inputFile;
            inputFile = fc.getSelectedFile();//get file
            input = inputFile.toString();//put file path to text
        }
        try {
            FileReader fileReader = new FileReader(input); //new buffered reader
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            while ((line = bufferedReader.readLine()) != null) {//read all lines of file
                entryTextField.append(line + "\n");//add line to text field
            }
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println(
                    "Unable to open file '"
                    + input + "'");
        } catch (IOException ex) {
            System.out.println(
                    "Error reading file '"
                    + input + "'");
        }
    }                                            

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        String output = Decrypt.decrypt(entryTextField.getText(), textA.getText(), textB.getText());//run decryption
        if(fieldOut.isSelected()){
            outputTextArea.setText(output);
            outputTextArea.update(outputTextArea.getGraphics());//Update output
        }else{
            try {
                statusTextDe.setText("Writing to file. Please Wait");//Set status
                statusTextDe.update(statusTextDe.getGraphics());//Updtae status
                PrintWriter out = new PrintWriter("dencrypted.txt");//Open a file writer
                out.print(output);//Put output into file
                out.close();
                statusTextDe.setText("Done writing to file.");//Set status
                statusTextDe.update(statusTextDe.getGraphics());//Updtae status
            } catch (FileNotFoundException ex) {
                Logger.getLogger(decalcUI.class.getName()).log(Level.SEVERE, null, ex);//Catch any errors
            }
        }
    }                                             

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(decalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(decalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(decalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(decalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new decalcUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearFields;
    private javax.swing.JButton decryptButton;
    private javax.swing.JTextArea entryTextField;
    private javax.swing.JRadioButton fieldOut;
    private javax.swing.JRadioButton fileOut;
    private javax.swing.JButton importButton;
    private javax.swing.ButtonGroup isOut;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton saveButton;
    public static javax.swing.JTextField statusTextDe;
    private javax.swing.JTextField textA;
    private javax.swing.JTextField textB;
    // End of variables declaration                   
}
